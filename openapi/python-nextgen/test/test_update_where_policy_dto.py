# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client.models.update_where_policy_dto import \
    UpdateWherePolicyDto  # noqa: E501


def make_instance(include_optional):
    """Test UpdateWherePolicyDto
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return UpdateWherePolicyDto(
            owner_group_list='',
            data=scicat_openapi_client.models.update_policy_dto
            .UpdatePolicyDto(
                owner_group='ingestor',
                access_groups=[
                    'admin',
                    'ingestor'
                ],
                instrument_group='instrument',
                manager=[
                    'ingestor'
                ],
                tape_redundancy='',
                auto_archive=True,
                auto_archive_delay=1.337,
                archive_email_notification=True,
                archive_emails_to_be_notified=[
                    ''
                ],
                retrieve_email_notification=True,
                retrieve_emails_to_be_notified=[
                    ''
                ],
                embargo_period=1.337, )
        )
    else:
        return UpdateWherePolicyDto(
            owner_group_list='ingestor',
            data=scicat_openapi_client.models.update_policy_dto
            .UpdatePolicyDto(
                owner_group='ingestor',
                access_groups=[
                    'admin',
                    'ingestor'
                ],
                instrument_group='instrument',
                manager=[
                    'ingestor'
                ],
                tape_redundancy='',
                auto_archive=True,
                auto_archive_delay=1.337,
                archive_email_notification=True,
                archive_emails_to_be_notified=[
                    ''
                ],
                retrieve_email_notification=True,
                retrieve_emails_to_be_notified=[
                    ''
                ],
                embargo_period=1.337, ),
        )


class TestUpdateWherePolicyDto(unittest.TestCase):
    """UpdateWherePolicyDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredUpdateWherePolicyDto(self):
        """Test UpdateWherePolicyDto"""
        make_instance(include_optional=False)

    def testOptionalUpdateWherePolicyDto(self):
        """Test UpdateWherePolicyDto"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
