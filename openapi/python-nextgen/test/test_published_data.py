# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import datetime
import unittest

from scicat_openapi_client.models.published_data import \
    PublishedData  # noqa: E501


def make_instance(include_optional):
    """Test PublishedData
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return PublishedData(
            doi='',
            affiliation='',
            creator=[
                ''
            ],
            publisher='',
            publication_year=1.337,
            title='',
            url='',
            abstract='',
            data_description='',
            resource_type='',
            number_of_files=1.337,
            size_of_archive=1.337,
            pid_array=[
                ''
            ],
            authors=[
                ''
            ],
            registered_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            status='',
            scicat_user='',
            thumbnail='',
            related_publications=[
                ''
            ],
            download_link='',
            created_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            updated_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f')
        )
    else:
        return PublishedData(
            doi='',
            creator=[
                ''
            ],
            publisher='',
            publication_year=1.337,
            title='',
            abstract='',
            data_description='',
            resource_type='',
            pid_array=[
                ''
            ],
            registered_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            status='',
            created_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            updated_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
        )


class TestPublishedData(unittest.TestCase):
    """PublishedData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredPublishedData(self):
        """Test PublishedData"""
        make_instance(include_optional=False)

    def testOptionalPublishedData(self):
        """Test PublishedData"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
