# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client.api.jobs_api import JobsApi  # noqa: E501
from test import api_client, login, logout
from test.test_create_job_dto import \
    make_instance as make_instance_job_create
from test.test_create_raw_dataset_dto import make_instance as make_instance_dataset_create
from test.test_update_job_dto import \
    make_instance as make_instance_job_update


class TestJobsApi(unittest.TestCase):
    """JobsApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = scicat_openapi_client.api.jobs_api.JobsApi(
            api_client)  # noqa: E501
        cls.api_dataset = scicat_openapi_client.api.datasets_api.DatasetsApi(
            api_client)  # noqa: E501
        login(cls.api, 'ingestor')
        login(cls.api_dataset, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)
        logout(cls.api_dataset)

    def setUp(self):
        job = make_instance_job_create(False)
        dataset = self.api_dataset.datasets_controller_create(
            make_instance_dataset_create(False))
        job.dataset_list = [dataset.pid]
        self.job = self.api.jobs_controller_create(job)

    def test_jobs_controller_create(self):
        """Test case for jobs_controller_create

        """
        job = make_instance_job_create(False)
        dataset = self.api_dataset.datasets_controller_create(
            make_instance_dataset_create(False))
        job.dataset_list = [dataset.pid]
        self.api.jobs_controller_create(job)

    def test_jobs_controller_find_all(self):
        """Test case for jobs_controller_find_all

        """
        self.api.jobs_controller_find_all()

    def test_jobs_controller_find_one(self):
        """Test case for jobs_controller_find_one

        """
        self.api.jobs_controller_find_one(self.job.id)

    def test_jobs_controller_fullfacet(self):
        """Test case for jobs_controller_fullfacet

        """
        self.api.jobs_controller_fullfacet()

    def test_jobs_controller_fullquery(self):
        """Test case for jobs_controller_fullquery

        """
        self.api.jobs_controller_fullquery()

    def test_jobs_controller_remove(self):
        """Test case for jobs_controller_remove

        """
        self.api.jobs_controller_remove(self.job.id)

    def test_jobs_controller_update(self):
        """Test case for jobs_controller_update

        """
        job = make_instance_job_update(False)
        dataset = make_instance_dataset_create(False)
        job.dataset_list = [dataset.pid]
        self.api.jobs_controller_update(
            self.job.id,
            job
        )


if __name__ == '__main__':
    unittest.main()
