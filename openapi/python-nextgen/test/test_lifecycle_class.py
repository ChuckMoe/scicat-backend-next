# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import datetime
import unittest

from scicat_openapi_client.models.lifecycle_class import \
    LifecycleClass  # noqa: E501


def make_instance(include_optional):
    """Test LifecycleClass
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return LifecycleClass(
            archivable=True,
            retrievable=True,
            publishable=True,
            date_of_disk_purging=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            archive_retention_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            date_of_publishing=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            published_on=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            is_on_central_disk=True,
            archive_status_message='',
            retrieve_status_message='',
            archive_return_message=None,
            retrieve_return_message=None,
            exported_to='',
            retrieve_integrity_check=True
        )
    else:
        return LifecycleClass()


class TestLifecycleClass(unittest.TestCase):
    """LifecycleClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredLifecycleClass(self):
        """Test LifecycleClass"""
        make_instance(include_optional=False)

    def testOptionalLifecycleClass(self):
        """Test LifecycleClass"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
