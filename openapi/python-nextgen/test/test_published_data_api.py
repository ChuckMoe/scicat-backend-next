# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client.api.published_data_api import \
    PublishedDataApi  # noqa: E501
from test import api_client, login, logout
from test.test_create_published_data_dto import \
    make_instance as make_instance_published_create
from test.test_update_published_data_dto import \
    make_instance as make_instance_published_update


class TestPublishedDataApi(unittest.TestCase):
    """PublishedDataApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = (scicat_openapi_client.api.published_data_api
                    .PublishedDataApi(api_client))  # noqa: E501
        login(cls.api, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)

    def test_published_data_controller_count(self):
        """Test case for published_data_controller_count

        """
        self.api.published_data_controller_count()

    def test_published_data_controller_create(self):
        """Test case for published_data_controller_create

        """
        self.api.published_data_controller_create(
            make_instance_published_create(False))

    def test_published_data_controller_find_all(self):
        """Test case for published_data_controller_find_all

        """
        self.api.published_data_controller_find_all('{"fields": ["doi"]}')

    def test_published_data_controller_find_one(self):
        """Test case for published_data_controller_find_one

        It returns the published data requested.  # noqa: E501
        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_find_one(published.id)

    def test_published_data_controller_form_populate(self):
        """Test case for published_data_controller_form_populate

        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_form_populate(published.id)

    def test_published_data_controller_register(self):
        """Test case for published_data_controller_register

        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_register(published.id)

    def test_published_data_controller_remove(self):
        """Test case for published_data_controller_remove

        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_remove(published.id)

    def test_published_data_controller_resync(self):
        """Test case for published_data_controller_resync

        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_resync(
            published.id,
            make_instance_published_update(False)
        )

    def test_published_data_controller_update(self):
        """Test case for published_data_controller_update

        """
        published = self.api.published_data_controller_create(
            make_instance_published_create(False))
        self.api.published_data_controller_resync(
            published.id,
            make_instance_published_update(False)
        )


if __name__ == '__main__':
    unittest.main()
