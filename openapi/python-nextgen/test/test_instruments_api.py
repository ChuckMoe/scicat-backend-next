# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client.api.instruments_api import \
    InstrumentsApi  # noqa: E501
from scicat_openapi_client.exceptions import ForbiddenException
from test import api_client, login, logout
from test.test_create_instrument_dto import \
    make_instance as make_instance_instrument_create
from test.test_update_instrument_dto import \
    make_instance as make_instance_instrument_update


class TestInstrumentsApi(unittest.TestCase):
    """InstrumentsApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = scicat_openapi_client.api.instruments_api.InstrumentsApi(
            api_client)  # noqa: E501
        login(cls.api, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)

    def setUp(self):
        self.instrument = self.api.instruments_controller_create(
            make_instance_instrument_create(False))

    def test_instruments_controller_create(self):
        """Test case for instruments_controller_create

        """
        self.api.instruments_controller_create(
            make_instance_instrument_create(False))

    def test_instruments_controller_find_all(self):
        """Test case for instruments_controller_find_all

        """
        self.api.instruments_controller_find_all()

    def test_instruments_controller_find_by_id(self):
        """Test case for instruments_controller_find_by_id

        """
        self.api.instruments_controller_find_by_id(self.instrument.pid)

    def test_instruments_controller_find_one(self):
        """Test case for instruments_controller_find_one

        It returns the first instrument found.  # noqa: E501
        """
        self.api.instruments_controller_find_one()

    def test_instruments_controller_remove(self):
        """Test case for instruments_controller_remove

        """
        try:
            self.api.instruments_controller_remove(self.instrument.pid)
        except ForbiddenException:
            assert True

    def test_instruments_controller_update(self):
        """Test case for instruments_controller_update

        """
        self.api.instruments_controller_update(
            self.instrument.pid,
            make_instance_instrument_update(False))


if __name__ == '__main__':
    unittest.main()
