# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client.api.datasets_api import DatasetsApi  # noqa: E501
from test import api_client, login, logout
from test.test_create_attachment_dto import \
    make_instance as make_instance_attachment_create
from test.test_create_dataset_datablock_dto import \
    make_instance as make_instance_datablock_create
from test.test_create_dataset_orig_datablock_dto import \
    make_instance as make_instance_orig_datablock_create
from test.test_create_raw_dataset_dto import \
    make_instance as make_instance_dataset_raw_create
from test.test_update_attachment_dto import \
    make_instance as make_instance_attachment_update
from test.test_update_datablock_dto import \
    make_instance as make_instance_datablock_update


class TestDatasetsApi(unittest.TestCase):
    """DatasetsApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = scicat_openapi_client.api.datasets_api.DatasetsApi(
            api_client)  # noqa: E501
        login(cls.api, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)

    def setUp(self):
        self.raw_dataset = self.api.datasets_controller_create(
            make_instance_dataset_raw_create(False))

    def test_datasets_controller_append_to_array_field(self):
        """Test case for datasets_controller_append_to_array_field

        It appends a new value to the specific field.  # noqa: E501
        """
        self.api.datasets_controller_append_to_array_field(
            self.raw_dataset.pid,
            'scientificMetadata',
            ['append']
        )

    def test_datasets_controller_count(self):
        """Test case for datasets_controller_count

        It returns the number of datasets.  # noqa: E501
        """
        self.api.datasets_controller_count(filter='{}')

    def test_datasets_controller_create_raw(self):
        """Test case for datasets_controller_create

        It creates a new dataset which can be a raw or derived one.  # noqa:
        E501
        """
        self.raw_dataset = self.api.datasets_controller_create(
            make_instance_dataset_raw_create(False))

    def test_datasets_controller_create_derived(self):
        """Test case for datasets_controller_create

        It creates a new dataset which can be a raw or derived one.  # noqa:
        E501
        """
        self.raw_dataset = self.api.datasets_controller_create(
            make_instance_dataset_raw_create(False))

    def test_datasets_controller_create_attachment(self):
        """Test case for datasets_controller_create_attachment

        It creates a new attachement for the dataset specified.  # noqa: E501
        """
        dto = make_instance_attachment_create(False)
        self.api.datasets_controller_create_attachment(
            self.raw_dataset.pid,
            dto
        )

    def test_datasets_controller_create_datablock(self):
        """Test case for datasets_controller_create_datablock

        It creates a new datablock for the dataset specified.  # noqa: E501
        """
        dto = make_instance_datablock_create(False)
        self.api.datasets_controller_create_datablock(
            self.raw_dataset.pid,
            dto
        )

    def test_datasets_controller_create_orig_datablock(self):
        """Test case for datasets_controller_create_orig_datablock

        It creates a new origDatablock for the dataset specified.  # noqa: E501
        """
        dto = make_instance_orig_datablock_create(False)
        self.api.datasets_controller_create_orig_datablock(
            self.raw_dataset.pid,
            dto
        )

    def test_datasets_controller_find_all(self):
        """Test case for datasets_controller_find_all

        It returns a list of datasets.  # noqa: E501
        """
        self.api.datasets_controller_find_all()

    def test_datasets_controller_find_all_attachments(self):
        """Test case for datasets_controller_find_all_attachments

        It returns all the attachments for the dataset specified.  # noqa: E501
        """
        self.api.datasets_controller_find_all_attachments(
            self.raw_dataset.pid)

    def test_datasets_controller_find_all_datablocks(self):
        """Test case for datasets_controller_find_all_datablocks

        It returns all the datablock for the dataset specified.  # noqa: E501
        """
        self.api.datasets_controller_find_all_datablocks(
            self.raw_dataset.pid)

    def test_datasets_controller_find_all_orig_datablocks(self):
        """Test case for datasets_controller_find_all_orig_datablocks

        It returns all the origDatablock for the dataset specified.  # noqa:
        E501
        """
        self.api.datasets_controller_find_all_orig_datablocks(
            self.raw_dataset.pid)

    def test_datasets_controller_find_by_id(self):
        """Test case for datasets_controller_find_by_id

        It returns the dataset requested.  # noqa: E501
        """
        self.api.datasets_controller_find_by_id(pid=self.raw_dataset.pid)

    def test_datasets_controller_find_by_id_and_delete(self):
        """Test case for datasets_controller_find_by_id_and_delete

        It deletes the dataset.  # noqa: E501
        """
        self.api.datasets_controller_find_by_id_and_delete(
            self.raw_dataset.pid)

    def test_datasets_controller_find_by_id_and_replace(self):
        """Test case for datasets_controller_find_by_id_and_replace

        It updates the dataset.  # noqa: E501
        """
        self.api.datasets_controller_find_by_id_and_replace(
            self.raw_dataset.pid)

    def test_datasets_controller_find_by_id_and_update(self):
        """Test case for datasets_controller_find_by_id_and_update

        It partially updates the dataset.  # noqa: E501
        """
        self.api.datasets_controller_find_by_id_and_update(
            self.raw_dataset.pid)

    def test_datasets_controller_find_logbook_by_pid(self):
        """Test case for datasets_controller_find_logbook_by_pid

        Retrive logbook associated with dataset.  # noqa: E501
        """
        self.api.datasets_controller_find_logbook_by_pid(
            self.raw_dataset.pid)

    def test_datasets_controller_find_one(self):
        """Test case for datasets_controller_find_one

        It returns the first dataset found.  # noqa: E501
        """
        self.api.datasets_controller_find_one(filter='{}')

    def test_datasets_controller_find_one_attachment_and_remove(self):
        """Test case for datasets_controller_find_one_attachment_and_remove

        It deletes the attachment from the dataset.  # noqa: E501
        """
        attachment_create = self.api.datasets_controller_create_attachment(
            self.raw_dataset.pid,
            make_instance_attachment_create(False)
        )
        self.api.datasets_controller_find_one_attachment_and_remove(
            self.raw_dataset.pid,
            attachment_create.id
        )

    def test_datasets_controller_find_one_attachment_and_update(self):
        """Test case for datasets_controller_find_one_attachment_and_update

        It updates the attachment specified for the dataset indicated.  #
        noqa: E501
        """
        attachment_create = self.api.datasets_controller_create_attachment(
            self.raw_dataset.pid,
            make_instance_attachment_create(False)
        )
        self.api.datasets_controller_find_one_attachment_and_update(
            self.raw_dataset.pid,
            attachment_create.id,
            make_instance_attachment_update(False)
        )

    def test_datasets_controller_find_one_datablock_and_remove(self):
        """Test case for datasets_controller_find_one_datablock_and_remove

        It deletes the datablock from the dataset.  # noqa: E501
        """
        datablock_create = self.api.datasets_controller_create_datablock(
            self.raw_dataset.pid,
            make_instance_datablock_create(False)
        )
        self.api.datasets_controller_find_one_datablock_and_remove(
            self.raw_dataset.pid,
            datablock_create.id
        )

    def test_datasets_controller_find_one_datablock_and_update(self):
        """Test case for datasets_controller_find_one_datablock_and_update

        It updates the datablocks specified for the dataset indicated.  #
        noqa: E501
        """
        datablock_create = self.api.datasets_controller_create_datablock(
            self.raw_dataset.pid,
            make_instance_datablock_create(False)
        )
        self.api.datasets_controller_find_one_datablock_and_update(
            self.raw_dataset.pid,
            datablock_create.id,
            make_instance_datablock_update(False)
        )

    def test_datasets_controller_find_one_orig_datablock_and_remove(self):
        """Test case for datasets_controller_find_one_orig_datablock_and_remove

        It deletes the origdatablock from the dataset.  # noqa: E501
        """
        orig_datablock_create = (
            self.api.datasets_controller_create_orig_datablock(
                self.raw_dataset.pid,
                make_instance_datablock_create(False)
            ))
        self.api.datasets_controller_find_one_orig_datablock_and_remove(
            self.raw_dataset.pid,
            orig_datablock_create.id
        )

    def test_datasets_controller_find_one_orig_datablock_and_update(self):
        """Test case for datasets_controller_find_one_orig_datablock_and_update

        It updates the origDatablocks specified for the dataset indicated.
        # noqa: E501
        """
        orig_datablock_create = (
            self.api.datasets_controller_create_orig_datablock(
                self.raw_dataset.pid,
                make_instance_datablock_create(False)
            ))
        self.api.datasets_controller_find_one_orig_datablock_and_update(
            self.raw_dataset.pid,
            orig_datablock_create.id,
            make_instance_datablock_update(False)
        )

    def test_datasets_controller_fullfacet(self):
        """Test case for datasets_controller_fullfacet

        It returns a list of dataset facets matching the filter provided.  #
        noqa: E501
        """
        self.api.datasets_controller_fullfacet()

    def test_datasets_controller_fullquery(self):
        """Test case for datasets_controller_fullquery

        It returns a list of datasets matching the query provided.  # noqa:
        E501
        """
        self.api.datasets_controller_fullquery()

    def test_datasets_controller_is_valid(self):
        """Test case for datasets_controller_is_valid

        It validates the dataset provided as input.  # noqa: E501
        """
        self.api.datasets_controller_is_valid(
            make_instance_dataset_raw_create(False))

    def test_datasets_controller_metadata_keys(self):
        """Test case for datasets_controller_metadata_keys

        It returns a list of metadata keys contained in the datasets
        matching the filter provided.  # noqa: E501
        """
        self.api.datasets_controller_metadata_keys()

    def test_datasets_controller_orig_datablock_is_valid(self):
        """Test case for datasets_controller_orig_datablock_is_valid

        It validates the origDatablock values passed.  # noqa: E501
        """
        self.api.datasets_controller_orig_datablock_is_valid(
            make_instance_orig_datablock_create(False))

    def test_datasets_controller_thumbnail(self):
        """Test case for datasets_controller_thumbnail

        It returns the thumbnail associated with the dataset.  # noqa: E501
        """
        self.api.datasets_controller_thumbnail(self.raw_dataset.pid)


if __name__ == '__main__':
    unittest.main()
