# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""
import unittest

import scicat_openapi_client
from scicat_openapi_client.api.proposals_api import ProposalsApi  # noqa: E501
from scicat_openapi_client.exceptions import ForbiddenException
from test import api_client, login, logout
from test.test_create_attachment_dto import \
    make_instance as make_instance_attachment_create
from test.test_create_proposal_dto import \
    make_instance as make_instance_proposal_create
from test.test_update_attachment_dto import \
    make_instance as make_instance_attachment_update
from test.test_update_proposal_dto import \
    make_instance as make_instance_proposal_update


class TestProposalsApi(unittest.TestCase):
    """ProposalsApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = scicat_openapi_client.api.proposals_api.ProposalsApi(
            api_client)  # noqa: E501
        login(cls.api, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)

    def test_proposals_controller_create(self):
        """Test case for proposals_controller_create

        It creates a new proposal.  # noqa: E501
        """
        self.api.proposals_controller_create(
            make_instance_proposal_create(False)
        )

    def test_proposals_controller_create_attachment(self):
        """Test case for proposals_controller_create_attachment

        It creates a new attachement for the proposal specified.  # noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        self.api.proposals_controller_create_attachment(
            proposal.proposal_id,
            make_instance_attachment_create(False)
        )

    def test_proposals_controller_find_all(self):
        """Test case for proposals_controller_find_all

        It returns a list of proposals.  # noqa: E501
        """
        self.api.proposals_controller_find_all()

    def test_proposals_controller_find_all_attachments(self):
        """Test case for proposals_controller_find_all_attachments

        It returns all the attachments for the proposal specified.  # noqa:
        E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        self.api.proposals_controller_find_all_attachments(
            proposal.proposal_id)

    def test_proposals_controller_find_all_datasets(self):
        """Test case for proposals_controller_find_all_datasets

        It returns all the datasets associated with the proposal indicated.
        # noqa: E501
        """
        self.api.proposals_controller_find_all()

    def test_proposals_controller_find_by_id(self):
        """Test case for proposals_controller_find_by_id

        It returns the proposal requested.  # noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            proposal_dto=make_instance_proposal_create(False))
        self.api.proposals_controller_find_by_id(proposal.proposal_id)

    def test_proposals_controller_find_one_attachment_and_remove(self):
        """Test case for proposals_controller_find_one_attachment_and_remove

        It deletes the attachment from the proposal.  # noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        attachment = self.api.proposals_controller_create_attachment(
            proposal.proposal_id,
            make_instance_attachment_create(False)
        )
        self.api.proposals_controller_find_one_attachment_and_remove(
            proposal.proposal_id,
            attachment.id
        )

    def test_proposals_controller_find_one_attachment_and_update(self):
        """Test case for proposals_controller_find_one_attachment_and_update

        It updates the attachment specified for the proposal indicated.  #
        noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        attachment = self.api.proposals_controller_create_attachment(
            proposal.proposal_id,
            make_instance_attachment_create(False)
        )
        self.api.proposals_controller_find_one_attachment_and_update(
            proposal.proposal_id,
            attachment.id,
            make_instance_attachment_update(False)
        )

    def test_proposals_controller_fullfacet(self):
        """Test case for proposals_controller_fullfacet

        It returns a list of proposal facets matching the filter provided.
        # noqa: E501
        """
        self.api.proposals_controller_fullfacet("{}")

    def test_proposals_controller_fullquery(self):
        """Test case for proposals_controller_fullquery

        It returns a list of proposals matching the query provided.  # noqa:
        E501
        """
        self.api.proposals_controller_fullquery('{}')

    def test_proposals_controller_is_valid(self):
        """Test case for proposals_controller_is_valid

        It validates the proposal provided as input.  # noqa: E501
        """
        self.api.proposals_controller_is_valid(
            make_instance_proposal_create(False))

    def test_proposals_controller_remove(self):
        """Test case for proposals_controller_remove

        It deletes the proposal.  # noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        try:
            self.api.proposals_controller_remove(proposal.proposal_id)
        except ForbiddenException:
            assert True

    def test_proposals_controller_update(self):
        """Test case for proposals_controller_update

        It updates the proposal.  # noqa: E501
        """
        proposal = self.api.proposals_controller_create(
            make_instance_proposal_create(False))
        self.api.proposals_controller_update(
            proposal.proposal_id,
            make_instance_proposal_update(False)
        )


if __name__ == '__main__':
    unittest.main()
