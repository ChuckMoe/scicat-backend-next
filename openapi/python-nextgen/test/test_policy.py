# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import datetime
import unittest

from scicat_openapi_client.models.policy import Policy  # noqa: E501


def make_instance(include_optional):
    """Test Policy
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return Policy(
            created_by='',
            updated_by='',
            created_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            updated_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            owner_group='',
            access_groups=[
                ''
            ],
            instrument_group='',
            is_published=True,
            id='',
            manager=[
                ''
            ],
            tape_redundancy='',
            auto_archive=True,
            auto_archive_delay=1.337,
            archive_email_notification=True,
            archive_emails_to_be_notified=[
                ''
            ],
            retrieve_email_notification=True,
            retrieve_emails_to_be_notified=[
                ''
            ],
            embargo_period=1.337
        )
    else:
        return Policy(
            created_by='',
            updated_by='',
            created_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            updated_at=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            owner_group='',
            access_groups=[
                ''
            ],
            is_published=True,
            id='',
            manager=[
                ''
            ],
            tape_redundancy='',
            auto_archive=True,
            auto_archive_delay=1.337,
            archive_email_notification=True,
            archive_emails_to_be_notified=[
                ''
            ],
            retrieve_email_notification=True,
            retrieve_emails_to_be_notified=[
                ''
            ],
            embargo_period=1.337,
        )


class TestPolicy(unittest.TestCase):
    """Policy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredPolicy(self):
        """Test Policy"""
        make_instance(include_optional=False)

    def testOptionalPolicy(self):
        """Test Policy"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
