# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import datetime
import unittest

import scicat_openapi_client
from scicat_openapi_client.models.partial_update_raw_dataset_dto import \
    PartialUpdateRawDatasetDto  # noqa: E501


def make_instance(include_optional):
    """Test PartialUpdateRawDatasetDto
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return PartialUpdateRawDatasetDto(
            owner_group='',
            access_groups=[
                ''
            ],
            instrument_group='',
            pid='',
            owner='',
            owner_email='',
            orcid_of_owner='',
            contact_email='',
            source_folder='',
            source_folder_host='',
            size=1.337,
            packed_size=1.337,
            number_of_files=1.337,
            number_of_files_archived=1.337,
            creation_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            type='raw',
            validation_status='',
            keywords=[
                ''
            ],
            description='',
            dataset_name='',
            classification='',
            license='',
            version='',
            is_published=True,
            techniques=[
                scicat_openapi_client.models.technique_class.TechniqueClass(
                    pid='',
                    name='', )
            ],
            shared_with=[
                ''
            ],
            relationships=[
                scicat_openapi_client.models.relationship_class
                .RelationshipClass(
                    pid='',
                    relationship='', )
            ],
            datasetlifecycle=None,
            scientific_metadata=None,
            comment='',
            data_quality_metrics=1.337,
            principal_investigator='',
            end_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            creation_location='',
            data_format='',
            proposal_id='',
            sample_id='',
            instrument_id=''
        )
    else:
        return PartialUpdateRawDatasetDto()


class TestPartialUpdateRawDatasetDto(unittest.TestCase):
    """PartialUpdateRawDatasetDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredPartialUpdateRawDatasetDto(self):
        """Test PartialUpdateRawDatasetDto"""
        make_instance(include_optional=False)

    def testOptionalPartialUpdateRawDatasetDto(self):
        """Test PartialUpdateRawDatasetDto"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
