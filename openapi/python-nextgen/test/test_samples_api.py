# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import unittest

import scicat_openapi_client
from scicat_openapi_client import CreateSampleDto
from scicat_openapi_client.api.samples_api import SamplesApi  # noqa: E501
from scicat_openapi_client.exceptions import ForbiddenException
from test import api_client, login, logout
from test.test_create_attachment_dto import \
    make_instance as make_instance_attachment_create
from test.test_create_sample_dto import \
    make_instance as make_instance_sample_create
from test.test_update_sample_dto import \
    make_instance as make_instance_sample_update


class TestSamplesApi(unittest.TestCase):
    """SamplesApi unit test stubs"""

    @classmethod
    def setUpClass(cls):
        cls.api = scicat_openapi_client.api.samples_api.SamplesApi(api_client)
        login(cls.api, 'ingestor')

    @classmethod
    def tearDownClass(cls):
        logout(cls.api)

    def test_samples_controller_create(self):
        """Test case for samples_controller_create

        It creates a new sample.  # noqa: E501
        """
        self.api.samples_controller_create(
            make_instance_sample_create(False)
        )

    def test_samples_controller_create_attachments(self):
        """Test case for samples_controller_create_attachments

        It creates a new attachment related with this sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        self.api.samples_controller_create_attachments(
            sample.sample_id,
            make_instance_attachment_create(False)
        )

    def test_samples_controller_find_all(self):
        """Test case for samples_controller_find_all

        It returns a list of samples  # noqa: E501
        """
        self.api.samples_controller_find_all()

    def test_samples_controller_find_all_attachments(self):
        """Test case for samples_controller_find_all_attachments

        It returns the attachments related to a specific sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        self.api.samples_controller_find_all_attachments(sample.sample_id)

    def test_samples_controller_find_all_datasets(self):
        """Test case for samples_controller_find_all_datasets

        It returns the datasets related to a specific sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        self.api.samples_controller_find_all_datasets(sample.sample_id)

    def test_samples_controller_find_by_id(self):
        """Test case for samples_controller_find_by_id

        It returns the sample requested.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        self.api.samples_controller_find_by_id(sample.sample_id)

    def test_samples_controller_find_one(self):
        """Test case for samples_controller_find_one

        It returns a sample matching the query provided.  # noqa: E501
        """
        self.api.samples_controller_find_one('{}')

    def test_samples_controller_find_one_attachment(self):
        """Test case for samples_controller_find_one_attachment

        It returns the attachment related to a specific sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        attachment = self.api.samples_controller_create_attachments(
            sample.sample_id,
            make_instance_attachment_create(False)
        )
        self.api.samples_controller_find_one_attachment(
            sample.sample_id,
            attachment.id
        )

    def test_samples_controller_find_one_attachment_and_remove(self):
        """Test case for samples_controller_find_one_attachment_and_remove

        It deletes the attachment related to a specific sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        attachment = self.api.samples_controller_create_attachments(
            sample.sample_id,
            make_instance_attachment_create(False)
        )
        self.api.samples_controller_find_one_attachment_and_remove(
            sample.sample_id,
            fk=attachment.id
        )

    def test_samples_controller_fullquery(self):
        """Test case for samples_controller_fullquery

        It returns a list of samples matching the query provided.  # noqa: E501
        """
        self.api.samples_controller_fullquery('{}')

    def test_samples_controller_metadata_keys(self):
        """Test case for samples_controller_metadata_keys

        It returns a list of sample metadata keys matching the query
        provided.  # noqa: E501
        """
        self.api.samples_controller_metadata_keys('{}')

    def test_samples_controller_remove(self):
        """Test case for samples_controller_remove

        It deletes the sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            make_instance_sample_create(False)
        )
        try:
            self.api.samples_controller_remove(sample.sample_id)
        except ForbiddenException:
            assert True

    def test_samples_controller_update(self):
        """Test case for samples_controller_update

        It updates the sample.  # noqa: E501
        """
        sample = self.api.samples_controller_create(
            CreateSampleDto(owner_group="ingestor")
        )
        self.api.samples_controller_update(
            sample.sample_id,
            make_instance_sample_update(False)
        )


if __name__ == '__main__':
    unittest.main()
