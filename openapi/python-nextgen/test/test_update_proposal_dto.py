# coding: utf-8

"""
    SciCat backend API

    This is the API for the SciCat Backend  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

import datetime
import unittest

import scicat_openapi_client
from scicat_openapi_client.models.update_proposal_dto import \
    UpdateProposalDto  # noqa: E501


def make_instance(include_optional):
    """Test UpdateProposalDto
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included """
    if include_optional:
        return UpdateProposalDto(
            owner_group='ingestor',
            access_groups=[
                'admin',
                'ingestor'
            ],
            instrument_group='instrument',
            proposal_id='',
            pi_email='pi@email.com',
            pi_firstname='P',
            pi_lastname='I',
            email='pi@email.com',
            firstname='P',
            lastname='I',
            title='Title',
            abstract='Abstract',
            start_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            end_time=datetime.datetime.strptime(
                '2013-10-20 19:20:30.00',
                '%Y-%m-%d %H:%M:%S.%f'),
            measurement_period_list=[
                scicat_openapi_client.models.measurement_period_class
                .MeasurementPeriodClass(
                    created_by='ingestor',
                    updated_by='ingestor',
                    created_at=datetime.datetime.strptime(
                        '2013-10-20 19:20:30.00',
                        '%Y-%m-%d %H:%M:%S.%f'),
                    updated_at=datetime.datetime.strptime(
                        '2013-10-20 19:20:30.00',
                        '%Y-%m-%d %H:%M:%S.%f'),
                    instrument='instrument',
                    start=datetime.datetime.strptime(
                        '2013-10-20 19:20:30.00',
                        '%Y-%m-%d %H:%M:%S.%f'),
                    end=datetime.datetime.strptime(
                        '2013-10-20 19:20:30.00',
                        '%Y-%m-%d %H:%M:%S.%f'),
                    comment='Comment', )
            ]
        )
    else:
        return UpdateProposalDto()


class TestUpdateProposalDto(unittest.TestCase):
    """UpdateProposalDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testRequiredUpdateProposalDto(self):
        """Test UpdateProposalDto"""
        make_instance(include_optional=False)

    def testOptionalUpdateProposalDto(self):
        """Test UpdateProposalDto"""
        make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
